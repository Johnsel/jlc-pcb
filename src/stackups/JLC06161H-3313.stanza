#use-added-syntax(jitx)
defpackage jlc-pcb/stackups/JLC06161H-3313:
  import core
  import jitx
  import jitx/commands

  import maybe-utils
  import jsl

  import jlc-pcb/stackups/vias
  import jlc-pcb/stackups/materials

public val stackup-gen = make-layer-stack("JLC06161H-3313", outers) where:
  val cu-1oz = Copper(0.035)
  val cu-halfoz = Copper(0.0152)

  val core = FR4(0.55, name = "core")
  val prepreg-3313 = FR4(0.0994, name = "3313")
  val prepreg-2116 = FR4(0.1088, name = "2116")
  
  val outers = [
  [cu-1oz, prepreg-3313],
  [cu-halfoz, core]
  [cu-halfoz, prepreg-2116]
  ]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Routing Structures
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

val ext-velocity = phase-velocity((Er-3313 + 1.0) / 2.0)
val int-velocity = phase-velocity((Er-3313 + Er-core) / 2.0)
val int-2116-velocity = phase-velocity((Er-2116 + Er-core) / 2.0)

public pcb-routing-structure se-50 (neckdown:Maybe<NeckDown> = None()):
  name = "50立 Single-Ended - CPWG - JLC06161H-3313"

  ; This expects a ground ref plane on Top + 1 and Bottom - 1
  val ext-se-50-ustrip = RoutingStructureLayerConstraints(
    trace-width = 0.1209
    clearance = 0.1016
    velocity = ext-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
 0
; This expects a ground ref plane on -1 and +1
  val l2_5-se-50-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.1082
    clearance = 0.1016
    velocity = int-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

; This expects a ground ref plane on -1 and +1
  val l3_4-se-50-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.1143
    clearance = 0.1016
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top) = ext-se-50-ustrip
  layer-constraints(Top + 1) = l2_5-se-50-stripline
  layer-constraints(Top + 2) = l3_4-se-50-stripline
  layer-constraints(Top + 3) = l3_4-se-50-stripline
  layer-constraints(Top + 4) = l2_5-se-50-stripline
  layer-constraints(Bottom) = ext-se-50-ustrip

public pcb-routing-structure uncoupled-diff-100-def:
  val df-100-ustrip = RoutingStructureLayerConstraints(
    trace-width = 0.0.1080
    clearance = 0.15
    velocity = ext-velocity
    insertion-loss = Dk-3313
  )

  val df-100-2-5-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.0942
    clearance = 0.15
    velocity = int-velocity
    insertion-loss = Dk-3313
  )

  val df-100-3-4-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.0988
    clearance = 0.15
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
  )

  layer-constraints(Top) = df-100-ustrip
  layer-constraints(Top + 1) = df-100-2-5-stripline
  layer-constraints(Top + 2) = df-100-3-4-stripline
  layer-constraints(Top + 3) = df-100-3-4-stripline
  layer-constraints(Top + 4) = df-100-2-5-stripline
  layer-constraints(Bottom) = df-100-ustrip

public pcb-differential-routing-structure diff-100 (
  uncoupled:Maybe<RoutingStructure> = None()
  neckdown:Maybe<DifferentialNeckDown> = None()
  ):
  name = "100立 Differential Pair - CPWG - JLC06161H-3313"

  make-uncoupled-region(uncoupled-diff-100-def, uncoupled)

  ; This expects a ground ref plane on Top + 1
  val df-100-ustrip = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1029
    pair-spacing = 0.15
    clearance = 0.15
    velocity = ext-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

  val df-100-2-5-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.0907
    pair-spacing = 0.15
    clearance = 0.15
    velocity = int-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

  val df-100-3-4-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.0945
    pair-spacing = 0.15
    clearance = 0.15
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top) = df-100-ustrip
  layer-constraints(Top + 1) = df-100-2-5-stripline
  layer-constraints(Top + 2) = df-100-3-4-stripline
  layer-constraints(Top + 3) = df-100-3-4-stripline
  layer-constraints(Top + 4) = df-100-2-5-stripline
  layer-constraints(Bottom) = df-100-ustrip


public pcb-routing-structure uncoupled-diff-90-def:
  val df-90-ustrip = RoutingStructureLayerConstraints(
    trace-width = 0.1118
    clearance = 0.1016
    velocity = ext-velocity
    insertion-loss = Dk-3313
  )
  
  val df-90-2-5-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.1008
    clearance = 0.1016
    velocity = int-velocity
    insertion-loss = Dk-3313
  )

  val df-90-3-4-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.1049
    clearance = 0.1016
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
  )

  layer-constraints(Top) = df-90-ustrip
  layer-constraints(Top + 1) = df-90-2-5-stripline
  layer-constraints(Top + 2) = df-90-3-4-stripline
  layer-constraints(Top + 3) = df-90-3-4-stripline
  layer-constraints(Top + 4) = df-90-2-5-stripline
  layer-constraints(Bottom) = df-90-ustrip

public pcb-differential-routing-structure diff-90 (
  uncoupled:Maybe<RoutingStructure> = None()
  neckdown:Maybe<DifferentialNeckDown> = None()
  ):
  name = "90立 Differential Pair - CPWG - JLC06161H-3313"

  make-uncoupled-region(uncoupled-diff-90-def, uncoupled)

  ; This expects a ground ref plane on Top + 1
  val df-90-ustrip = DiffRoutingStructureLayerConstraints(
    trace-width = 0.0996
    pair-spacing = 0.1016
    clearance = 0.1016
    velocity = ext-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

  val df-90-2-5-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.0930
    pair-spacing = 0.1016
    clearance = 0.1016
    velocity = int-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

  val df-90-3-4-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.0958
    pair-spacing = 0.1016
    clearance = 0.1016
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top) = df-90-ustrip
  layer-constraints(Top + 1) = df-90-2-5-stripline
  layer-constraints(Top + 2) = df-90-3-4-stripline
  layer-constraints(Top + 3) = df-90-3-4-stripline
  layer-constraints(Top + 4) = df-90-2-5-stripline
  layer-constraints(Bottom) = df-90-ustrip


public pcb-routing-structure uncoupled-diff-85-def:
  val df-85-ustrip = RoutingStructureLayerConstraints(
    trace-width = 0.1308
    clearance = 0.1016
    velocity = ext-velocity
    insertion-loss = Dk-3313
  )
  
  val df-85-2-5-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.1166
    clearance = 0.1016
    velocity = int-velocity
    insertion-loss = Dk-3313
  )

  val df-85-3-4-stripline = RoutingStructureLayerConstraints(
    trace-width = 0.1219
    clearance = 0.1016
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
  )

  layer-constraints(Top) = df-85-ustrip
  layer-constraints(Top + 1) = df-85-2-5-stripline
  layer-constraints(Top + 2) = df-85-3-4-stripline
  layer-constraints(Top + 3) = df-85-3-4-stripline
  layer-constraints(Top + 4) = df-85-2-5-stripline
  layer-constraints(Bottom) = df-85-ustrip

public pcb-differential-routing-structure diff-85 (
  uncoupled:Maybe<RoutingStructure> = None()
  neckdown:Maybe<DifferentialNeckDown> = None()
  ):
  name = "85立 Differential Pair - CPWG - JLC06161H-3313"

  make-uncoupled-region(uncoupled-diff-85-def, uncoupled)

  ; This expects a ground ref plane on Top + 1
  val df-85-ustrip = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1179
    pair-spacing = 0.1016
    clearance = 0.1016
    velocity = ext-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

  val df-85-2-5-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1082
    pair-spacing = 0.1016
    clearance = 0.1016
    velocity = int-velocity
    insertion-loss = Dk-3313
    neck-down = value-or-else(neckdown, {false})
  )

  val df-85-3-4-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1118
    pair-spacing = 0.1016
    clearance = 0.1016
    velocity = int-2116-velocity
    insertion-loss = Dk-2116
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top) = df-85-ustrip
  layer-constraints(Top + 1) = df-85-2-5-stripline
  layer-constraints(Top + 2) = df-85-3-4-stripline
  layer-constraints(Top + 3) = df-85-3-4-stripline
  layer-constraints(Top + 4) = df-85-2-5-stripline
  layer-constraints(Bottom) = df-85-ustrip


public defn JLC06161H-3313 (vias:Tuple<Via> = JLC-VIA-DEFAULTS) -> Substrate :
  Substrate(
    stackup = stackup-gen,
    vias = [
      std-via-preferred, tented-filled-std-via
    ],
    single-ended = [
      50 => se-50,
    ]
    differential = [
      85 => diff-85,
      90 => diff-90,
      100 => diff-100,
    ]
  )
